<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.Kotori.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.Kotori.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <association property="department" javaType="com.Kotori.domain.Department" columnPrefix="d_">
      <result column="id" property="id"></result>
      <result column="name" property="name"></result>
    </association>

  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee where id = #{id,jdbcType=BIGINT}
  </delete>

  <delete id="deleteEmployeeAndRoleRel">
    delete from employee_role_rel where eid = #{eid}
  </delete>

  <insert id="insert" parameterType="com.Kotori.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (id, username, password, inputtime, tel, email, state, admin, dept_no)
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{inputtime,jdbcType=TIMESTAMP},
      #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{admin,jdbcType=BIT}, 
      #{department.id,jdbcType=BIGINT})
  </insert>

  <insert id="insertEmployeeAndRoleRel">
    insert into employee_role_rel (eid,rid) values (#{eid}, #{rid})
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.Kotori.domain.Employee" >
    update employee
    set username = #{username,jdbcType=VARCHAR},
      inputtime = #{inputtime,jdbcType=TIMESTAMP},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      admin = #{admin,jdbcType=BIT},
      dept_no = #{department.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateStateById" parameterType="java.lang.Long">
    update employee set state = false where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, inputtime, tel, email, state, admin, dept_no from employee
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectAll" resultMap="BaseResultMap" >
    select e.id, e.username, e.inputtime, e.tel, e.email, e.state, e.admin, e.dept_no, d.id AS d_id, d.name AS d_name
    from employee AS e LEFT JOIN department AS d ON e.dept_no = d.id
  </select>

  <select id="vagueQueryEmployee" parameterType="String" resultType="com.Kotori.domain.Employee">
    select * from employee where username like '%${value}%'
  </select>

  <select id="getEmployeeByUsername" resultType="com.Kotori.domain.Employee">
    select * from employee where username = #{username}
  </select>

  <select id="getRolesById" resultType="java.lang.String">
    select r.rnum from employee_role_rel as rel
    left join role as r
    on rel.rid = r.rid
    where eid = #{id}
  </select>

  <select id="getPermissionsById" resultType="java.lang.String">
    select distinct p.presource from role_permission_rel as rel
    left join permission as p on rel.pid = p.pid
    where rid in (select rid from employee_role_rel where eid=#{id})
  </select>

</mapper>